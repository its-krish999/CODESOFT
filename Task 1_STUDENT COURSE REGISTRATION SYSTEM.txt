import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Course {
    private String courseCode;
    private String title;
    private String description;
    private int capacity;
    private String schedule;
    private int enrolledStudents;

    public Course(String courseCode, String title, String description, int capacity, String schedule) {
        this.courseCode = courseCode;
        this.title = title;
        this.description = description;
        this.capacity = capacity;
        this.schedule = schedule;
        this.enrolledStudents = 0;
    }

    public String getCourseCode() {
        return courseCode;
    }

    public String getTitle() {
        return title;
    }

    public String getDescription() {
        return description;
    }

    public int getCapacity() {
        return capacity;
    }

    public String getSchedule() {
        return schedule;
    }

    public int getEnrolledStudents() {
        return enrolledStudents;
    }

    public void enrollStudent() {
        enrolledStudents++;
    }

    public void dropStudent() {
        enrolledStudents--;
    }
}

class Student {
    private int studentID;
    private String name;
    private List<String> registeredCourses;

    public Student(int studentID, String name) {
        this.studentID = studentID;
        this.name = name;
        this.registeredCourses = new ArrayList<>();
    }

    public int getStudentID() {
        return studentID;
    }

    public String getName() {
        return name;
    }

    public List<String> getRegisteredCourses() {
        return registeredCourses;
    }

    public void registerCourse(String courseCode) {
        registeredCourses.add(courseCode);
    }

    public void dropCourse(String courseCode) {
        registeredCourses.remove(courseCode);
    }
}

class CourseManager {
    private List<Course> courses;

    public CourseManager() {
        this.courses = new ArrayList<>();
    }

    public void addCourse(Course course) {
        courses.add(course);
    }

    public void displayCourses() {
        System.out.println("Available Courses:");
        for (Course course : courses) {
            System.out.println("Course Code: " + course.getCourseCode());
            System.out.println("Title: " + course.getTitle());
            System.out.println("Description: " + course.getDescription());
            System.out.println("Capacity: " + course.getCapacity());
            System.out.println("Schedule: " + course.getSchedule());
            System.out.println("Enrolled Students: " + course.getEnrolledStudents());
            System.out.println("-------------------------");
        }
    }

    public Course getCourseByCode(String courseCode) {
        for (Course course : courses) {
            if (course.getCourseCode().equals(courseCode)) {
                return course;
            }
        }
        return null;
    }
}

public class CourseRegistrationSystem {
    public static void main(String[] args) {
        CourseManager courseManager = new CourseManager();
        Scanner scanner = new Scanner(System.in);

        // Adding sample courses
        Course course1 = new Course("CSE101", "Introduction to Programming", "Basic programming concepts", 30, "Mon-Wed-Fri 10:00 AM");
        Course course2 = new Course("MAT201", "Calculus", "Fundamentals of calculus", 25, "Tue-Thu 1:00 PM");
        courseManager.addCourse(course1);
        courseManager.addCourse(course2);

        while (true) {
            System.out.println("1. Display Available Courses");
            System.out.println("2. Register for Course");
            System.out.println("3. Drop Course");
            System.out.println("4. Exit");
            System.out.print("Choose an option: ");
            int option = scanner.nextInt();

            switch (option) {
                case 1:
                    courseManager.displayCourses();
                    break;
                case 2:
                    scanner.nextLine(); // Clear the buffer
                    System.out.print("Enter your name: ");
                    String name = scanner.nextLine();
                    System.out.print("Enter your student ID: ");
                    int studentID = scanner.nextInt();
                    scanner.nextLine(); // Clear the buffer
                    System.out.print("Enter the course code you want to register: ");
                    String courseCodeToRegister = scanner.nextLine();

                    Course courseToRegister = courseManager.getCourseByCode(courseCodeToRegister);
                    if (courseToRegister != null && courseToRegister.getEnrolledStudents() < courseToRegister.getCapacity()) {
                        Student student = new Student(studentID, name);
                        student.registerCourse(courseCodeToRegister);
                        courseToRegister.enrollStudent();
                        System.out.println(name + " has successfully registered for " + courseCodeToRegister);
                    } else {
                        System.out.println("Course not found or course is full.");
                    }
                    break;
                case 3:
                    scanner.nextLine(); // Clear the buffer
                    System.out.print("Enter your student ID: ");
                    int studentIDToDrop = scanner.nextInt();
                    scanner.nextLine(); // Clear the buffer
                    System.out.print("Enter the course code you want to drop: ");
                    String courseCodeToDrop = scanner.nextLine();

                    Course courseToDrop = courseManager.getCourseByCode(courseCodeToDrop);
                    if (courseToDrop != null) {
                        Student studentToDrop = new Student(studentIDToDrop, ""); // Create a temporary student for dropping course
                        if (studentToDrop.getRegisteredCourses().contains(courseCodeToDrop)) {
                            studentToDrop.dropCourse(courseCodeToDrop);
                            courseToDrop.dropStudent();
                            System.out.println("Course dropped successfully.");
                        } else {
                            System.out.println("Student is not registered for this course.");
                        }
                    } else {
                        System.out.println("Course not found.");
                    }
                    break;
                case 4:
                    System.out.println("Exiting...");
                    scanner.close();
                    System.exit(0);
                    break;
                default:
                    System.out.println("Invalid option.");
                    break;
            }
        }
    }
}